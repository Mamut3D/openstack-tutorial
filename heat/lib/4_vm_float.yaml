heat_template_version: 2016-04-08

description: >
  This template creates private network with one server with floating ip address

parameters:
  server_name:
    type: string
    description: Name of the server
    default: HeatServer
  key_name:
    type: string
    description: Name of an existing key pair to use for the server
    default: key
    constraints:
      - custom_constraint: nova.keypair
  flavor:
    type: string
    description: Flavor for the server to be created
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image ID or image name to use for the server
    default: 349edb01-1a73-4926-a773-481035cd774e
    constraints:
      - custom_constraint: glance.image

  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: public-float-21
  cidr:
    type: string
    label: Network CIDR
    description: The CIDR of the private network.
    default: '10.0.10.0/24'
  dns:
    type: comma_delimited_list
    label: DNS nameservers
    description: Comma separated list of DNS nameservers for the private network.
    default: '147.251.4.33,147.251.6.10'




resources:
  ###########################################
  # Compute resources

  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: server_name }
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: server_port }

  ###########################################
  # Create Network resources


  private_network:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: private_network }
      cidr: { get_param: cidr }
      dns_nameservers: { get_param: dns }

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_network }
      fixed_ips:
        - subnet: { get_resource: private_subnet }
      security_groups: [{ get_resource: security_group }]

  # Router
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: private_subnet }

  # Floating IP
  server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: server_port }

  # Securtiy group
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: SSH_and_http_sg
      description: Ping and SSH
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 80
        port_range_max: 80

outputs:
  floating_ip:
    description: Floating IP of server
    value: { get_attr: [ server_floating_ip, fixed_ip_address ] }
